

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  username       String  @unique
  email          String  @unique
  hashedPassword String
  about          String?
  coverImage     String?
  profileImage   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  followingIds   String[] @db.ObjectId
  bookmarks      String[] @db.ObjectId   // contains bookmarked status ids
  notification   Boolean?

  statuses      Status[]
  comments      Comment[]
  notifications Notification[]
  journals         Journal[]
}

model Status {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  image     String?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  likedIds  String[] @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  statusId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  status Status @relation(fields: [statusId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Journal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String   @unique
  image     String?
  content   String
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}